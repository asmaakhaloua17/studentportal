{"version":3,"sources":["firebase.js","img/logo001a.png","components/Register.js","components/Footer.js","img/logo-nav.png","components/Sidenav.js","components/Classes/ClassNav.js","components/Modules/Ressources/RessourceDetail.js","components/Classes/ClassItem.js","components/Classes/ListClasses.js","components/Assignments/Assignments.js","components/Modules/Ressources/RessourceItem.js","components/Dashboard.js","components/Modules/Ressources/ListRessources.js","components/Modules/ModuleItem.js","components/Modules/ListModules.js","components/Classes/ClassDetails.js","components/Assignments/AssignmentDetails.js","components/DashboardTeacher.js","components/Tools/ColorPicker.js","components/Classes/ManageClasses.js","components/Assignments/ListAssignmentByClass.js","components/Classes/ClassNew.js","components/Grades/Grades.js","components/Assignments/ManageAssignment.js","components/Assignments/AssignmentList.js","components/Attendances/PeopleByClass.js","components/Attendances/AttendanceByClass.js","components/Modules/ManageModules.js","components/Assignments/AssignmentNew.js","components/Modules/ModuleNew.js","components/Attendances/RollCall.js","index.js"],"names":["initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createBrowserHistory","Component","style","backgroundColor","textAlign","padding","position","left","bottom","height","width","phantom","display","Footer","children","Sidenav","props","state","classList","assignmentList","dashboardlink","currentuser","euid","dbRef","ref","getDatabase","this","get","child","then","snapshot","exists","forEach","item","itemVal","val","push","teacherID","console","log","classID","setState","onlyOnce","catch","error","title","listclasses","map","class_item","NavDropdown","Item","to","name","section","courseName","listassignments","assignment_item","assignmentID","teacher","className","id","Navbar","bg","expand","Container","Brand","href","src","logo","alt","Toggle","Collapse","Nav","Link","ClassNav","defaultActiveKey","classId","isActive","eventKey","ClassItem","students","includes","Card","Img","variant","Style","classColor","Body","Title","Text","description","Button","class","ListClasses","CardGroup","role","Assignments","assignmentsList","assignment","Badge","pill","dueDate","summary","RessourceItem","ressourceList","moduleID","ressource_item","typeID","ressourceID","target","rel","ListRessources","ModuleItem","moduleList","publishedID","module_item","Accordion","flush","Header","ListModules","ColorPicker","selectedColour","onSelectcolor","colour","index","onClick","setSelectedColour","ManageClasses","openModal","classid","actionType","openedDialog","closeModal","handleColorCode","colorValue","handleClassInput","e","value","handleRemoveClass","db","window","confirm","remove","location","reload","document","getElementById","innerText","handleUpdateClass","set","meetingDates","published","roomNumber","seats","session","split","show","nb_classes","showHide","studentList","studentListUI","studentsID","nbclasses","hidefeedback","Alert","Table","striped","bordered","hover","size","DropdownButton","Dropdown","Modal","onHide","closeButton","Form","onSubmit","Group","Label","Control","type","defaultValue","required","readOnly","maxLength","disabled","ListAssignmentByClass","points","ManageAssignment","assignmentid","handleAssignmentInput","handleUpdateAssignment","onChange","as","Check","label","ManageModules","moduleid","handleModuleInput","handleUpdateModule","getRessources","ressourcesList","sel_moduleID","handleAddRessource","ReactDOM","render"],"mappings":"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","file":"static/js/main.9fa12a03.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\r\n\r\n\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyDXkzLfPAgUllqviplE_qiQOO06EhCf1tU\",\r\n    authDomain: \"student-portal-prod-7827d.firebaseapp.com\",\r\n    databaseURL: \"https://student-portal-prod-7827d-default-rtdb.firebaseio.com\",\r\n    projectId: \"student-portal-prod-7827d\",\r\n    storageBucket: \"student-portal-prod-7827d.appspot.com\",\r\n    messagingSenderId: \"672147118793\",\r\n    appId: \"1:672147118793:web:e2317e9719656541c84b18\"\r\n  };\r\n  \r\n\r\n\r\n  const app = initializeApp(firebaseConfig);\r\n\r\n\r\nexport default app;","export default __webpack_public_path__ + \"static/media/logo001a.cbd003c7.png\";","import { React, Component } from \"react\";\r\nimport { Form, Button, Card, Container } from \"react-bootstrap\";\r\nimport \"../firebase\";\r\nimport { getDatabase, set, ref } from \"firebase/database\";\r\nimport { Link } from 'react-router-dom';\r\nimport logo from \"../img/logo001a.png\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default class Register extends Component {\r\n  \r\n  //Props\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      uFullName: \"\",\r\n      uEuid: \"\",\r\n      uDateOfBirth: \"\",\r\n      uPassword: \"\",\r\n      uCPassword: \"\",\r\n      formErrors: {\r\n        dateOfBirth: \"\",\r\n        password: \"\",\r\n        passwordConfirm: \"\",\r\n        fullName: \"\",\r\n        euid: \"\",\r\n      },\r\n      dateOfBirthValid: false,\r\n      passwordValid: false,\r\n      formValid: false,\r\n    };\r\n  }\r\n\r\n  handleAddUser = () => {\r\n let errorlist =\"\";\r\n    //validate\r\n    if (this.state.uEuid.length < 6) {\r\n     \r\n      errorlist += \"\\n Please enter euid : it is too short.\";\r\n     \r\n    }\r\n    if (this.state.uFullName.length === 0) {\r\n    \r\n      errorlist += \"\\n Please enter FullName : it is too short.\";\r\n    } else {\r\n      const db = getDatabase();\r\n      bcrypt.hash(this.state.uPassword, 12).then((hashpassword) => {\r\n        set(ref(db, \"users/\" + this.state.uEuid), {\r\n          euid: this.state.uEuid,\r\n          fullName: this.state.uFullName,\r\n          dateofbirth: this.state.uDateOfBirth,\r\n          password: hashpassword,\r\n        })\r\n          .then(() => {\r\n          \r\n            this.props.history.push(\"/\",{ state: 'pass'});\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"Data failed!\" + error);\r\n          });\r\n      });\r\n    }\r\n    var error = document.getElementById(\"errorMessage\");\r\n    error.textContent = errorlist;\r\n  };\r\n  handleUserInput = (e) => {\r\n    const name = e.target.name;\r\n\r\n    const value = e.target.value;\r\n    // console.log(\"name\" +name + value);\r\n    this.setState({ [name]: value }, () => {\r\n      this.validateField(name, value);\r\n    });\r\n  };\r\n  validateField(fieldName, value) {\r\n    let fieldValidationErrors = this.state.formErrors;\r\n    let dbValid = this.state.uDateOfBirth;\r\n    let passwordValid = this.state.uPassword;\r\n    let fullNameValid = this.state.uFullName;\r\n    let euidValid = this.state.uEuid;\r\n\r\n    switch (fieldName) {\r\n      case \"uDateOfBirth\":\r\n        dbValid = value.match(\r\n          /^(((19|20)\\d\\d))-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/\r\n        );\r\n\r\n        fieldValidationErrors.dateOfBirth = dbValid ? \"\" : \" is invalid\";\r\n\r\n        this.setState({\r\n          dateOfBirthValid: fieldValidationErrors.dateOfBirth.length === 0,\r\n        });\r\n        console.log(\"dateOfBirthValid :\" + this.state.dateOfBirthValid);\r\n        break;\r\n      case \"uCPassword\":\r\n        passwordValid = this.state.uPassword === value;\r\n\r\n        fieldValidationErrors.passwordConfirm = passwordValid\r\n          ? \"\"\r\n          : \" password not match\";\r\n        this.setState({ passwordValid: passwordValid });\r\n        break;\r\n      case \"uPassword\":\r\n        passwordValid = value.length >= 6;\r\n        fieldValidationErrors.password = passwordValid ? \"\" : \" is too short\";\r\n        break;\r\n      case \"uFullName\":\r\n        fullNameValid = value.length > 0;\r\n\r\n        fieldValidationErrors.fullName = fullNameValid\r\n          ? \"\"\r\n          : \" can not be empty\";\r\n        break;\r\n      case \"uEuid\":\r\n        euidValid = value.length >= 6;\r\n       // console.log(\"euidValid\" + euidValid);\r\n        fieldValidationErrors.euid = euidValid ? \"\" : \" is too short\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ formErrors: fieldValidationErrors }, this.validateForm);\r\n  }\r\n  validateForm() {\r\n   // console.log( \"validate : \" + this.state.dateOfBirthValid && this.state.passwordValid );\r\n    this.setState({\r\n      formValid: this.state.dateOfBirthValid && this.state.passwordValid,\r\n    });\r\n  }\r\n  errorClass(error) {\r\n    // console.log(error);\r\n    return error.length === 0 ? \"\" : \"has-error\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container className=\"d-flex align-item-center justify-content-center\">\r\n          <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n            <img\r\n              src={logo}\r\n              className=\"logo mx-auto d-block mb-3 mt-3\"\r\n              alt=\"Portal logo\"\r\n            ></img>\r\n            <Card className=\"login\">\r\n              <Card.Body>\r\n                <div class=\"shadow p-2 mb-3 bg-primary text-center text-white\">\r\n                  <h2>Register</h2>\r\n                </div>\r\n                <div className=\"body\">\r\n                <div className=\"w-100 text-center mt-2 text-danger\" id=\"errorMessage\" ></div>\r\n                  <Form>\r\n                    <Form.Group\r\n                      id=\"fullName\"\r\n                      className={`${this.errorClass(\r\n                        this.state.formErrors.fullName\r\n                      )}`}\r\n                    >\r\n                      <Form.Label>Full Name</Form.Label>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        name=\"uFullName\"\r\n                        required\r\n                        onChange={this.handleUserInput}\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                      id=\"euid\"\r\n                      className={`${this.errorClass(\r\n                        this.state.formErrors.euid\r\n                      )}`}\r\n                    >\r\n                      <Form.Label>EUID</Form.Label>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        name=\"uEuid\"\r\n                        required\r\n                        onChange={this.handleUserInput}\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                      id=\"date-of-birth\"\r\n                      className={`${this.errorClass(\r\n                        this.state.formErrors.dateOfBirth\r\n                      )}`}\r\n                    >\r\n                      <Form.Label>Date of Birth</Form.Label>\r\n                      <Form.Control\r\n                        type=\"date\"\r\n                        name=\"uDateOfBirth\"\r\n                        required\r\n                        onChange={this.handleUserInput}\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                      id=\"password\"\r\n                      className={`${this.errorClass(\r\n                        this.state.formErrors.password\r\n                      )}`}\r\n                    >\r\n                      <Form.Label>Password</Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"uPassword\"\r\n                        required\r\n                        onChange={this.handleUserInput}\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                      id=\"password-confirm\"\r\n                      className={`${this.errorClass(\r\n                        this.state.formErrors.passwordConfirm\r\n                      )}`}\r\n                    >\r\n                      <Form.Label>Password Confirmation</Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"uCPassword\"\r\n                        required\r\n                        onChange={this.handleUserInput}\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group id=\"action\">\r\n                  \r\n                      <Button\r\n                        className=\"w-100 btn-secondary\"\r\n                        size=\"lm\"\r\n                        type=\"Button\"\r\n                        onClick={this.handleAddUser}\r\n                        disabled={!this.state.formValid}\r\n                      >\r\n                        Sign Up\r\n                      </Button>\r\n                    </Form.Group>\r\n                  </Form>\r\n                  <div className=\"w-100 text-center mt-2\">\r\n                    Already have an account?\r\n                    <Link to=\"/\"> Log In </Link>\r\n                  </div>\r\n                \r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","var style = {\r\n    backgroundColor: \"#F8F8F8\",\r\n  \r\n    textAlign: \"center\",\r\n    padding: \"20px\",\r\n    position: \"fixed\",\r\n    left: \"0\",\r\n    bottom: \"0\",\r\n    height: \"60px\",\r\n    width: \"100%\",\r\n}\r\n\r\nvar phantom = {\r\n  display: 'block',\r\n  padding: '20px',\r\n  height: '60px',\r\n  width: '100%',\r\n}\r\n\r\nfunction Footer({ children }) {\r\n    return (\r\n        <div>\r\n            <div style={phantom} />\r\n            <div style={style}>\r\n              Copyright 2021\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","export default __webpack_public_path__ + \"static/media/logo-nav.2c59ed9d.png\";","import React, { Component } from 'react'\r\nimport { NavDropdown, Navbar, Container,Nav } from \"react-bootstrap\";\r\nimport   \"../firebase\";\r\nimport { getDatabase, ref,get,child } from \"firebase/database\";\r\nimport logo from \"../img/logo-nav.png\"\r\nimport {Link} from 'react-router-dom';\r\nexport default class Sidenav extends Component {\r\n   \r\n    constructor(props) {\r\n    \r\n        super(props);\r\n       \r\n        \r\n        this.state = {classList : [],assignmentList : [],dashboardlink :\"\",currentuser : this.props.euid}\r\n        }\r\n        componentDidMount() {\r\n            \r\n            const dbRef = ref(getDatabase());\r\n            let classList = [];\r\n            let assignmentList = [];\r\nlet dashboardlink =\"Dashboard\";\r\nlet currentuser =this.state.currentuser;\r\n            //get list of classes\r\n            get(child(dbRef, `classes`)).then((snapshot) => {\r\n              if (snapshot.exists()) {\r\n                snapshot.forEach(function(item) {\r\n                    var itemVal = item.val();\r\n                    classList.push(itemVal);\r\n               \r\n                if(itemVal.teacherID == currentuser)\r\n                {\r\n                  dashboardlink = \"DashboardTeacher\";\r\n                }\r\n               \r\n                   console.log(itemVal.classID);\r\n                });\r\n               \r\n                this.setState({ dashboardlink:dashboardlink });\r\n               this.setState({ classList:classList });\r\n    \r\n              } else {\r\n                console.log(\"No data available\");\r\n              }\r\n            }, {\r\n                onlyOnce: true\r\n              }).catch((error) => {\r\n              console.error(error);\r\n            }); \r\n          \r\n\r\n              //get list of assignments\r\n              get(child(dbRef, `assignments`)).then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                  snapshot.forEach(function(item) {\r\n                      var itemVal = item.val();\r\n                      assignmentList.push(itemVal);\r\n                     console.log(itemVal.title);\r\n                  });\r\n                 \r\n                 \r\n                 this.setState({ assignmentList:assignmentList });\r\n              \r\n                } else {\r\n                  console.log(\"No data available\");\r\n                }\r\n              }, {\r\n                  onlyOnce: true\r\n                }).catch((error) => {\r\n                console.error(error);\r\n              }); \r\n            \r\n        }\r\n    render() {\r\n        \r\n        //create nav nodes for classes\r\n        const listclasses = this.state.classList.map((class_item) =>\r\n        \r\n        <NavDropdown.Item key={class_item.classID}>\r\n       \r\n          {<Link to={`/classDetails/${class_item.classID}/${class_item.teacherID}`}>\r\n          {class_item.name} Section {class_item.section} - {class_item.courseName}\r\n     </Link>}\r\n          \r\n          </NavDropdown.Item>\r\n    );  \r\n //create nav nodes for assignments\r\n const listassignments = this.state.assignmentList.map((assignment_item) =>\r\n <NavDropdown.Item \r\n \r\n   key={assignment_item.assignmentID}>\r\n     {<Link to={`/assignmentDetails/${assignment_item.assignmentID}/${assignment_item.classID}/${assignment_item.teacher}`}>\r\n       {assignment_item.title} -- Section {assignment_item.className} {assignment_item.section} - {assignment_item.courseName}\r\n     </Link>}\r\n </NavDropdown.Item>\r\n \r\n);\r\n        return (\r\n         \r\n             \r\n       \r\n<div id=\"slide-out\" className=\"side-nav fixed\">\r\n<Navbar bg=\"light\" expand=\"lg\" className=\"nav-portal\">\r\n  <Container>\r\n    \r\n    <Navbar.Brand href=\"#\"><img src={logo} alt=\"logo\" className=\"nav-logo\"></img></Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"me-auto\">\r\n       \r\n        <Nav.Link href=\"#\"><Link to={`/`+this.state.dashboardlink+`/`+this.props.euid}>\r\n   Dashboard\r\n </Link></Nav.Link>\r\n    \r\n        \r\n         \r\n        \r\n         \r\n     \r\n       \r\n        <NavDropdown title=\"Classes\" id=\"basic-nav-dropdown\">\r\n           {listclasses} \r\n        </NavDropdown>\r\n        <NavDropdown title=\"Assignments\" id=\"basic-nav-dropdown\">\r\n           {listassignments} \r\n        </NavDropdown>\r\n        <Nav.Link href=\"#home\">Attendance</Nav.Link>\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Container>\r\n</Navbar>\r\n</div>\r\n\r\n           \r\n        )\r\n    }\r\n}\r\n","\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport { Nav} from \"react-bootstrap\";\r\nimport   \"../../firebase\";\r\n\r\n\r\n\r\nexport default class ClassNav extends Component {\r\n\r\n    render() {\r\n  \r\n        return (\r\n        \r\n            <Nav defaultActiveKey=\"/\" className=\"class-nav flex-column\">\r\n        \r\n            <Nav.Link href={ \"/classDetails/\"+ this.props.classId+\"/\"+this.props.euid} className={(this.props.isActive == 1) ?\"active\": \"\"}>Modules</Nav.Link>\r\n            <Nav.Link href={\"/Grades/\"+ this.props.classId+\"/\"+this.props.euid} className={(this.props.isActive ==2) ?\"active\": \"\"}>Grades</Nav.Link>\r\n            <Nav.Link href={`/assignmentListsByClass/`+this.props.classId+\"/\"+this.props.euid} className={(this.props.isActive == 3) ?\"active\": \"\"}>Assignments</Nav.Link>\r\n            <Nav.Link eventKey=\"link-4\" href={ \"/attendances/\"+ this.props.classId+\"/\"+this.props.euid} className={(this.props.isActive == 4) ?\"active\": \"\"}>Attendance</Nav.Link>\r\n            <Nav.Link eventKey=\"link-5\"  href={ \"/people/\"+ this.props.classId+\"/\"+this.props.euid}  className={(this.props.isActive ==5) ?\"active\": \"\"}>People</Nav.Link>\r\n          </Nav>\r\n\r\n\r\n            );\r\n        \r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport { Container, Row, Col, Breadcrumb } from \"react-bootstrap\";\r\nimport Footer from \"../../Footer\";\r\nimport Sidenav from \"../../Sidenav\";\r\nimport ClassNav from \"../../Classes/ClassNav\";\r\nimport \"../../../firebase\";\r\n//import \"font-awesome/css/font-awesome.min.css\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class RessourceDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { description: \"\", title: \"\" };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n\r\n    let title = \"\";\r\n    let description = \"\";\r\n    //get list of ressources\r\n    get(child(dbRef, `ressources`))\r\n      .then(\r\n        (snapshot) => {\r\n          let ressourceID = this.props.match.params.ressourceId;\r\n          console.log(\"searching for ressources\" + ressourceID);\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              //  console.log(\"ressource \"+ressourceID);\r\n              if (itemVal.ressourceID == ressourceID) {\r\n                description = itemVal.description;\r\n                title = itemVal.title;\r\n              }\r\n            });\r\n            this.setState({ description: description });\r\n            this.setState({ title: title });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div >\r\n   \r\n       <Sidenav euid={this.props.match.params.euid} />\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col xs lg=\"2\">\r\n              <ClassNav  euid={this.props.match.params.euid} classId={this.props.match.params.classId}  isActive=\"1\"></ClassNav>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"ressources\">\r\n                <Breadcrumb>\r\n               \r\n                  <Breadcrumb.Item>\r\n                    <Link\r\n                      to={`/classDetails/${this.props.match.params.classId}/${this.props.match.params.euid}`}\r\n                    >\r\n                      Class\r\n                    </Link>\r\n                  </Breadcrumb.Item>\r\n                  <Breadcrumb.Item>\r\n                    <Link\r\n                      to={`/classDetails/${this.props.match.params.classId}/${this.props.match.params.euid}`}\r\n                    >\r\n                      Module {this.props.match.params.moduleId}\r\n                    </Link>\r\n                  </Breadcrumb.Item>\r\n                  <Breadcrumb.Item active>{this.state.title}</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n\r\n                <Accordion defaultActiveKey=\"0\" flush>\r\n                  <Accordion.Item eventKey=\"0\">\r\n                    <Accordion.Header>{this.state.title}</Accordion.Header>\r\n                    <Accordion.Body>{this.state.description}</Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Card} from \"react-bootstrap\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class ClassItem extends Component {\r\n    constructor(props) {\r\n    \r\n        super(props);\r\n      \r\n        \r\n        this.state = {classList : []}\r\n        }\r\n        componentDidMount() {\r\n            \r\n            const dbRef = ref(getDatabase());\r\n            let classList = [];\r\n           \r\n\r\n    //get list of classes\r\n    get(child(dbRef, `classes`)).then((snapshot) => {\r\n      let euid = this.props.euid;\r\n      console.log(`object list`,   this.props.euid);\r\n      if (snapshot.exists()) {\r\n        snapshot.forEach(function (item) {\r\n          var itemVal = item.val();\r\n          console.log(\" euid:\"+ euid +  itemVal.students+ itemVal.students.includes(euid));\r\n          if(itemVal.teacherID == euid || itemVal.students.includes(euid)){\r\n          classList.push(itemVal);\r\n         \r\n          }\r\n        });\r\n        this.setState({ classList: classList });\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n    }, {\r\n      onlyOnce: true\r\n    }).catch((error) => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n            \r\n        \r\n    render() {\r\n        \r\n       \r\n        return (\r\n            \r\n            this.state.classList.map((class_item) =>\r\n                   <div>\r\n                \r\n                <Card style={{ width: '18rem','marginRight': '20px' }}>\r\n                  \r\n  <Card.Img variant=\"top\" className=\"class_img\" Style={\"Background-color:\"+class_item.classColor}  />\r\n  <Card.Body>\r\n    <Card.Title>{class_item.name}</Card.Title>\r\n    <Card.Text>\r\n    {class_item.description}\r\n    </Card.Text>\r\n    <Button variant=\"primary class-more-btn\"><Link to={`/classDetails/${class_item.classID}/${this.props.euid}`}>\r\n    <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>  Access\r\n          </Link></Button>         \r\n  </Card.Body>\r\n</Card>\r\n            </div>\r\n               ));\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CardGroup} from \"react-bootstrap\";\r\nimport   \"../../firebase\";\r\n\r\nimport ClassItem from './ClassItem';\r\n\r\nexport default class ListClasses extends Component {\r\n\r\n    render() {\r\n        \r\n       \r\n        return (\r\n            <CardGroup>\r\n       \r\n                <ClassItem role={this.props.role} euid={this.props.euid}></ClassItem>\r\n            </CardGroup>\r\n\r\n\r\n            );\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\"\r\nimport \"../../css/assignmentStyle.css\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, Button } from \"react-bootstrap\";\r\n\r\nexport default class Assignments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { assignmentsList: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = ref(getDatabase());\r\n        let assignmentList = [];\r\n\r\n        // Get list of assignments\r\n        get(child(dbRef, 'assignments'))\r\n            .then(assignment => {\r\n                if (assignment.exists()) {\r\n                    assignment.forEach(item => {\r\n                        let itemVal = item.val();\r\n                        assignmentList.push(itemVal);\r\n                        console.log(itemVal.title);\r\n                    });\r\n\r\n                    this.setState({ assignmentsList: assignmentList });\r\n                } else {\r\n                    console.log(\"No assignemnts found\");\r\n                }\r\n            }, {\r\n                onlyOnce: true\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        // Creates assignemnts cards\r\n        return (\r\n            this.state.assignmentsList.map(item => \r\n                <div  id=\"card\">\r\n                    <h2 className=\"title card-title h5\">{item.title}</h2>\r\n                    <section>\r\n                    <p> <Badge pill  bg=\"success\">{item.className}</Badge> | \r\n                   <Badge pill  bg=\"danger\">{item.dueDate}</Badge>\r\n                    </p>\r\n                   <p> {item.summary} </p>\r\n                \r\n                      \r\n                    <Button variant=\"secondary class-more-btn\"><Link to={`/assignmentDetails/${item.assignmentID}/${item.classID}/${this.props.euid}`}>+ More</Link></Button>\r\n                    </section>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ListGroup from \"react-bootstrap/Accordion\";\r\n\r\nimport \"../../../firebase\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class RessourceItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ressourceList: [] };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let ressourceList = [];\r\n\r\n    //get list of ressources\r\n    get(child(dbRef, `ressources`))\r\n      .then(\r\n        (snapshot) => {\r\n          let moduleID = this.props.moduleID;\r\n          console.log(\"searching for ressources\" + moduleID);\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              // console.log(\"found 1\"+itemVal.moduleID);\r\n              if (itemVal.moduleID == moduleID) {\r\n                console.log(\"found :\" + moduleID);\r\n                ressourceList.push(itemVal);\r\n              }\r\n            });\r\n            this.setState({ ressourceList: ressourceList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return this.state.ressourceList.map((ressource_item) => (\r\n      <div className=\"ressources\">\r\n        <ListGroup>\r\n          <ListGroup.Item>\r\n            {\" \"}\r\n            <i\r\n              className={`fa fa-${\r\n                ressource_item.typeID === 1 ? \"file\" : \"external-link\"\r\n              }`}\r\n            ></i>\r\n           {/*if the ressource type is file */}\r\n\r\n            {ressource_item.typeID === 1 ? (\r\n              <Link\r\n                to={`/ressourceDetails/${ressource_item.ressourceID}/${this.props.moduleID}/${this.props.classID}/${this.props.euid}`}\r\n              >\r\n                {ressource_item.title}{\" \"}\r\n              </Link>\r\n            ) : (\r\n                /*if the ressource type is external link */\r\n              <a href={ressource_item.description} target=\"_blank\" rel=\"noreferrer\">\r\n                {ressource_item.title}{\" \"}\r\n              </a>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n      </div>\r\n    ));\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport Footer from \"./Footer\";\r\nimport Sidenav from \"./Sidenav\";\r\nimport ListClasses from \"./Classes/ListClasses\";\r\nimport Assignments from \"./Assignments/Assignments\";\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            <Sidenav role=\"student\" euid={this.props.match.params.euid}/>\r\n        <Container>\r\n        \r\n          \r\n        \r\n          <Row className=\"theme_body\">\r\n          <div className=\"big-title\">\r\n\t\t      <h3 className=\"big_title\">Classes</h3>\r\n     \r\n                <div> <ListClasses role=\"student\" euid= {this.props.match.params.euid}></ListClasses></div>\r\n</div>\r\n<div className=\"big-title\">\r\n\t\t      <h3 className=\"big_title\">Assignments</h3>\r\n\t\t\t\r\n                <div className=\"assignment-cards\"> <Assignments euid= {this.props.match.params.euid} /></div>\r\n</div>\r\n          </Row>\r\n          <Row>\r\n              <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport   \"../../../firebase\";\r\n\r\nimport Ressourcetem from './RessourceItem';\r\n\r\nexport default class ListRessources extends Component {\r\n\r\n    render() {\r\n        \r\n       \r\n        return (\r\n           <div>\r\n\r\n                <Ressourcetem classID ={this.props.classID} moduleID={this.props.moduleID} euid={this.props.euid}></Ressourcetem>\r\n     \r\n           </div>\r\n          \r\n\r\n\r\n            );\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\n\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\n\r\nimport ListRessources from './Ressources/ListRessources';\r\n\r\nexport default class ModuleItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {moduleList : [] };\r\n\r\n        }\r\n        componentDidMount() {\r\n            \r\n            const dbRef = ref(getDatabase());\r\n            let moduleList = [];\r\n           \r\n\r\n    //get list of modules\r\n    get(child(dbRef, `modules`)).then((snapshot) => {\r\n     \r\n      let classID = this.props.classID;\r\n      console.log(\"searching for modules\"+classID);\r\n      if (snapshot.exists()) {\r\n        snapshot.forEach(function (item) {\r\n        \r\n          var itemVal = item.val();\r\n         // console.log(\"found 1\"+itemVal.classID);\r\n          if(itemVal.classID == classID && itemVal.publishedID == 1)\r\n          {\r\n           \r\n            moduleList.push(itemVal);\r\n          }\r\n        \r\n         \r\n        });\r\n        this.setState({ moduleList: moduleList });\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n    }, {\r\n      onlyOnce: true\r\n    }).catch((error) => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n            \r\n        \r\n    render() {\r\n        \r\n       \r\n        return (\r\n           \r\n            this.state.moduleList.map((module_item) =>\r\n              <div className=\"modules\">\r\n            <Accordion defaultActiveKey=\"0\" flush>\r\n            <Accordion.Item eventKey=\"0\">\r\n              <Accordion.Header>{module_item.title}</Accordion.Header>\r\n              <Accordion.Body>\r\n            <ListRessources  classID={this.props.classID} moduleID={module_item.moduleID} euid={this.props.euid}></ListRessources>\r\n              </Accordion.Body>\r\n            </Accordion.Item>\r\n            </Accordion>\r\n            </div>\r\n               ));\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport   \"../../firebase\";\r\n\r\nimport ModuleItem from './ModuleItem';\r\n\r\nexport default class ListModules extends Component {\r\n\r\n    render() {\r\n        \r\n       \r\n        return (\r\n           <>\r\n\r\n                <ModuleItem euid={this.props.euid} classID={this.props.classID}></ModuleItem>\r\n     \r\n           </>\r\n          \r\n\r\n\r\n            );\r\n        \r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ClassNav from \"./ClassNav\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\nimport ListModules from \"../Modules/ListModules\";\r\nexport default class ClassDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { classTitle: \"\" ,classSection :\"\" };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n\r\n    //get  classe title\r\n\r\n    get(child(dbRef, \"classes/\" + this.props.match.params.classId))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n          \r\n            if (\r\n              this.props.match.params.classId == snapshot.child(\"classID\").val()\r\n            ) {\r\n              this.setState({ classTitle: snapshot.child(\"name\").val() });\r\n              this.setState({ classSection: snapshot.child(\"section\").val() });\r\n            }\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n    \r\n       <Sidenav   euid={this.props.match.params.euid} />\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col xs lg=\"2\">\r\n          \r\n              <ClassNav classId={this.props.match.params.classId} euid={this.props.match.params.euid} isActive=\"1\"></ClassNav>\r\n            </Col>\r\n            <Col> <h3 className=\"big_title\">{this.state.classTitle} Section {this.state.classSection}</h3>\r\n           \r\n            <ListModules classID={this.props.match.params.classId} euid={this.props.match.params.euid}></ListModules>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Breadcrumb,\r\n  Badge,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ClassNav from \"../Classes/ClassNav\";\r\nimport \"../../firebase\";\r\n//import \"font-awesome/css/font-awesome.min.css\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class AssignmentDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { description: \"\", title: \"\", dueDate: \"\", className: \"\" };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n\r\n    let title = \"\";\r\n    let description = \"\";\r\n    let dueDate = \"\";\r\n    let points = \"\";\r\n    let className = \"\";\r\n    //get list of ressources\r\n    get(child(dbRef, `assignments`))\r\n      .then(\r\n        (snapshot) => {\r\n          let assignmentID = this.props.match.params.assignmentID;\r\n          console.log(\"searching for assignments\" + assignmentID);\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              //  console.log(\"ressource \"+ressourceID);\r\n              if (itemVal.assignmentID == assignmentID) {\r\n                description = itemVal.description;\r\n                title = itemVal.title;\r\n                dueDate = itemVal.dueDate;\r\n                points = itemVal.points;\r\n                className = itemVal.className;\r\n              }\r\n            });\r\n            this.setState({ description: description });\r\n            this.setState({ title: title });\r\n            this.setState({ dueDate: dueDate });\r\n            this.setState({ points: points });\r\n            this.setState({ className: className });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Sidenav euid={this.props.match.params.euid} />\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col xs lg=\"2\">\r\n              <ClassNav\r\n                euid={this.props.match.params.euid}\r\n                classId={this.props.match.params.classId}\r\n                isActive=\"3\"\r\n              ></ClassNav>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"assignment\">\r\n                <Breadcrumb>\r\n                  <Breadcrumb.Item>\r\n                    <Link\r\n                      to={`/classDetails/${this.props.match.params.classId}/${this.props.match.params.euid}`}\r\n                    >\r\n                      Class\r\n                    </Link>\r\n                  </Breadcrumb.Item>\r\n                  <Breadcrumb.Item>\r\n                    <Link\r\n                      to={`/assignmentListsByClass/${this.props.match.params.classId}/${this.props.match.params.euid}`}\r\n                    >\r\n                      Assignments {this.props.match.params.moduleId}\r\n                    </Link>\r\n                  </Breadcrumb.Item>\r\n                  <Breadcrumb.Item active>{this.state.title}</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n\r\n                <Accordion defaultActiveKey=\"0\" flush>\r\n                  <Accordion.Item eventKey=\"0\">\r\n                    <Accordion.Header>{this.state.title}</Accordion.Header>\r\n                    <Accordion.Body>\r\n                      <Row>\r\n                        <Col>\r\n                          <span Style=\"font-weight: bold;color: red;\">\r\n                            {\" \"}\r\n                            <i className=\"fa fa-calendar-plus-o\"></i>Due Date :\r\n                          </span>{\" \"}\r\n                          <Badge bg=\"secondary\">{this.state.dueDate}</Badge> |    <Badge bg=\"info\">{this.state.className}</Badge>\r\n                        </Col>\r\n                      </Row>\r\n                    \r\n                      <Row>\r\n                        <p>{this.state.description}</p>\r\n                      </Row>\r\n                      <Button variant=\"primary\">Submit assignment</Button>\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col,Alert,Button } from \"react-bootstrap\";\r\nimport Footer from \"./Footer\";\r\nimport Sidenav from \"./Sidenav\";\r\nimport ListClasses from \"./Classes/ListClasses\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class DashboardTeacher extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n             <Sidenav  role=\"teacher\" euid={this.props.match.params.euid} />\r\n        <Container>\r\n        \r\n        \r\n        \r\n          <Row className=\"theme_body\">\r\n            <div>\r\n            <Col className=\"welcome_box\">\r\n<Alert key=\"welcome\" variant=\"secondary\">\r\n<h4>Welcome</h4>\r\n<p>\r\n\r\nAww yeah, you successfully read this important alert message.\r\n</p>\r\n<hr/>\r\n<div className=\"d-flex justify-content-end\">\r\n<Button variant=\"primary\"><Link to={`/rollCall/${this.props.match.params.euid}`}  className=\"white\">\r\n<i class=\"fa fa-hand-paper-o\" aria-hidden=\"true\"></i> Roll Call\r\n          </Link></Button> <Button variant=\"primary\"><Link className=\"white\" to={`/newClass/${this.props.match.params.euid}`}>\r\n          <i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i> Manage Classes\r\n          </Link></Button>\r\n          <Button variant=\"primary\"><Link className=\"white\" to={`/manageAssignment/${this.props.match.params.euid}`}>\r\n          <i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i> Manage Assignments\r\n          </Link></Button>\r\n        </div>\r\n\r\n  </Alert>\r\n\r\n</Col>\r\n\r\n              </div>\r\n          <div className=\"big-title\">\r\n\t\t      <h3 className=\"big_title\">Classes</h3>\r\n\t\t\t\r\n                <div> <ListClasses role=\"teacher\" euid={this.props.match.params.euid}></ListClasses></div>\r\n</div>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ColorPicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n    this.state = { selectedColour :\"\"\r\n    };\r\n    this.props.onSelectcolor(this.state.selectedColour);\r\n}\r\n    setSelectedColour(colour) {\r\n\t\tthis.setState({ selectedColour: colour });\r\n\t}\r\n    render() {\r\n        const defaultColours = [\r\n            '#FF1654',\r\n            '#247BA0',\r\n            '#70C1B3',\r\n            '#92b300',\r\n            '#CBB1DB',\r\n            '#C1BF70',\r\n            '#add8e6',\r\n            '#ffc1cb',\r\n            '#67d8f3',\r\n            '#f3af67'\r\n        ];\r\n        \r\n        return (\r\n           \r\n         \r\n            <ul className=\"icons\">\r\n                {defaultColours.map((colour, index) => {\r\n                    return (\r\n                        <li key={index} onClick={() =>{ this.setSelectedColour(colour);   this.props.onSelectcolor(colour);}}>\r\n                            <span className={`dot color border-radius ${this.state.selectedColour === colour ? 'selected' : ''}`} style={{ backgroundColor: colour}}></span>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set, remove } from \"firebase/database\";\r\nimport ColorPicker from \"../Tools/ColorPicker\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class ManageClasses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      classList: [],\r\n      show: false,\r\n      openedDialog: -1,\r\n      nb_classes: 0,\r\n      actionType: \"\",\r\n      classColor: \"\",\r\n      showHide: false,\r\n      studentList: [],\r\n      studentListUI: [],\r\n      studentsID: [],\r\n      nbclasses: 0,\r\n      classID: \"\",\r\n      description: \"\",\r\n      meetingDates: \"\",\r\n      title: \"\",\r\n      published: 0,\r\n      roomNumber: \"\",\r\n      seats: 0,\r\n      section: \"\",\r\n      session: 2,\r\n      students: [],\r\n      teacherID: this.props.teacherID,\r\n      hidefeedback: \"none\",\r\n    };\r\n  }\r\n\r\n  openModal = (classid, actionType) => {\r\n    this.setState({\r\n      openedDialog: classid,\r\n      actionType: actionType,\r\n    });\r\n  };\r\n\r\n  closeModal = () => {\r\n    this.setState({\r\n      openedDialog: null,\r\n    });\r\n  };\r\n  handleColorCode = (colorValue) => {\r\n    this.setState({ classColor: colorValue });\r\n  };\r\n  //method to update the state variables with the user inputs\r\n  handleClassInput = (e) => {\r\n    const name = e.target.name;\r\n\r\n    const value = e.target.value;\r\n\r\n    this.setState({ [name]: value });\r\n    console.log(\"Name: \" + name + \"value:\" + value);\r\n  };\r\n  //handle popup\r\n  handleModalShowHide() {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n\r\n  //method to remove class to the database\r\n  handleRemoveClass = (classID) => {\r\n    const db = getDatabase();\r\n    ///\r\n\r\n    if (window.confirm(\"Are you sure you wish to delete this item?\")) {\r\n      remove(ref(db, \"classes/\" + classID))\r\n        .then(() => {\r\n          window.location.reload(false);\r\n          document.getElementById(\"feedback\").style.display = \"block\";\r\n          document.getElementById(\"feedback\").innerText =\r\n            \"Class \" + classID + \" remove successfully!\";\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Failed to remove class :\" + classID + \" error :\" + error\r\n          );\r\n        });\r\n    }\r\n\r\n    ///\r\n  };\r\n  //method to update class to the database\r\n  handleUpdateClass = (classID) => {\r\n    const db = getDatabase();\r\n    set(ref(db, \"classes/\" + classID), {\r\n      classID: classID,\r\n      description: document.getElementById(\"description_val\").value,\r\n      meetingDates: document.getElementById(\"meetingDates_val\").value,\r\n      name: document.getElementById(\"name_val\").value,\r\n      published: 1,\r\n      roomNumber: document.getElementById(\"roomNumber_val\").value,\r\n      seats: document.getElementById(\"seats_val\").value,\r\n      section: document.getElementById(\"section_val\").value,\r\n      session: document.getElementById(\"session_val\").value,\r\n      students: document.getElementById(\"studentIDs_val\").value.split(\",\"),\r\n      teacherID: this.props.teacherID,\r\n      classColor: this.state.classColor,\r\n    })\r\n      .then(() => {\r\n        window.location.reload(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Failed to save data new class!\" + error);\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let classList = [];\r\n    let teacher = this.props.teacherID;\r\n\r\n    //get list of classes\r\n    get(child(dbRef, `classes`))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              console.log(\"Teacher ID\" + itemVal.teacherID + \"---\" + teacher);\r\n              if (itemVal.teacherID == teacher) {\r\n                console.log(\"Teacher ID\" + itemVal.teacherID);\r\n                classList.push(itemVal);\r\n              }\r\n            });\r\n            // this.setState({nb_classes: nb_classes});\r\n            this.setState({ classList: classList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Alert\r\n          key=\"feedback\"\r\n          id=\"feedback\"\r\n          variant=\"\"\r\n          Style=\"display :\"\r\n          {...this.state.hidefeedback}\r\n        ></Alert>\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Class</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.classList.map((class_item) => (\r\n              <tr>\r\n                <td>{class_item.classID}</td>\r\n                <td>{class_item.name}</td>\r\n                <td width=\"37%\">\r\n                  {\" \"}\r\n                  <Button\r\n                    variant=\"primary class-more-btn\"\r\n                    onClick={() =>\r\n                      this.openModal(class_item.classID, \"details\")\r\n                    }\r\n                  >\r\n                    <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>{\" \"}\r\n                    Details\r\n                  </Button>{\" \"}\r\n                  <DropdownButton title=\"Manage\" id=\"bg-nested-dropdown\">\r\n                    <Dropdown.Item\r\n                      eventKey=\"1\"\r\n                      onClick={() =>\r\n                        this.openModal(class_item.classID, \"update\")\r\n                      }\r\n                    >\r\n                      <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>{\" \"}\r\n                      Update\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">\r\n                      <i class=\"fa fa-address-book\" aria-hidden=\"true\"></i> Add\r\n                      Student\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">\r\n                      <i class=\"fa fa-address-book\" aria-hidden=\"true\"></i>\r\n                      <Link to={`/manageModules/`+class_item.classID+`/`+this.props.teacherID}>\r\n                      Manage Modules\r\n </Link> \r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item\r\n                      eventKey=\"2\"\r\n                      onClick={() => this.handleRemoveClass(class_item.classID)}\r\n                    >\r\n                      <i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete\r\n                    </Dropdown.Item>\r\n                  </DropdownButton>\r\n                </td>\r\n                <Modal\r\n                  show={this.state.openedDialog === class_item.classID}\r\n                  onHide={this.closeModal}\r\n                >\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>{class_item.name}</Modal.Title>\r\n                  </Modal.Header>\r\n\r\n                  <Modal.Body>\r\n                    <Form\r\n                      onSubmit={() =>\r\n                        this.handleUpdateClass(class_item.classID)\r\n                      }\r\n                    >\r\n                      <Form.Group id=\"name\">\r\n                        <Form.Label>Name</Form.Label>\r\n\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"name_val\"\r\n                          defaultValue={class_item.name}\r\n                          required\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group id=\"description\">\r\n                        <Form.Label>Description</Form.Label>\r\n\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"description_val\"\r\n                          defaultValue={class_item.description}\r\n                          maxLength =\"124\"\r\n                          required\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group id=\"section\">\r\n                        <Form.Label>Section</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"section_val\"\r\n                          defaultValue={class_item.section}\r\n                          required\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group id=\"session\">\r\n                        <Form.Label>Session</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"session_val\"\r\n                          required\r\n                          defaultValue={class_item.session}\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group id=\"roomNumber\">\r\n                        <Form.Label>Room Number</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"roomNumber_val\"\r\n                          required\r\n                          defaultValue={class_item.roomNumber}\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group id=\"seats\">\r\n                        <Form.Label>Seats</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"seats_val\"\r\n                          required\r\n                          defaultValue={class_item.seats}\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group id=\"meetingDates\">\r\n                        <Form.Label>Meeting Day</Form.Label>\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          id=\"meetingDates_val\"\r\n                          required\r\n                          defaultValue={class_item.meetingDates}\r\n                          readOnly={\r\n                            this.state.actionType === \"update\" ? false : true\r\n                          }\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <input\r\n                        type=\"hidden\"\r\n                        id=\"studentIDs_val\"\r\n                        defaultValue={class_item.students}\r\n                      ></input>\r\n                      <Form.Group\r\n                        id=\"class-color\"\r\n                        Style={\r\n                          this.state.actionType === \"update\"\r\n                            ? \"display:block\"\r\n                            : \"display:none\"\r\n                        }\r\n                      >\r\n                        <Form.Label>Pick a color</Form.Label>\r\n\r\n                        <ColorPicker\r\n                          onSelectcolor={this.handleColorCode}\r\n                        ></ColorPicker>\r\n                      </Form.Group>\r\n                      <Button\r\n                        variant=\"primary\"\r\n                        disabled={\r\n                          this.state.actionType === \"update\" ? false : true\r\n                        }\r\n                        type=\"submit\"\r\n                      >\r\n                        Save Changes\r\n                      </Button>\r\n                    </Form>\r\n                  </Modal.Body>\r\n                </Modal>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport ListGroup from \"react-bootstrap/Accordion\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class ListAssignmentByClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {assignmentList : [] };\r\n\r\n        }\r\n        componentDidMount() {\r\n            \r\n            const dbRef = ref(getDatabase());\r\n            let assignmentList = [];\r\n           \r\n\r\n    //get list of assignments\r\n    get(child(dbRef, `assignments`)).then((snapshot) => {\r\n     \r\n      let classID = this.props.classID;\r\n      console.log(\"searching for assignments\"+classID);\r\n      if (snapshot.exists()) {\r\n        snapshot.forEach(function (item) {\r\n        \r\n          var itemVal = item.val();\r\n         // console.log(\"found 1\"+itemVal.classID);\r\n         //itemVal.published == 1\r\n          if(itemVal.classID == classID )\r\n          {\r\n           \r\n            assignmentList.push(itemVal);\r\n          }\r\n        \r\n         \r\n        });\r\n        this.setState({ assignmentList: assignmentList });\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n    }, {\r\n      onlyOnce: true\r\n    }).catch((error) => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n            \r\n        \r\n    render() {\r\n        \r\n       \r\n        return (\r\n           \r\n            this.state.assignmentList.map((assignment_item) =>\r\n              <div className=\"assignments-list\">\r\n       \r\n        <ListGroup>\r\n          <ListGroup.Item>\r\n          <i className=\"fa fa-pencil-square-o\"></i>\r\n              <Link\r\n                to={`/assignmentDetails/${assignment_item.assignmentID}/${this.props.classID}/${this.props.euid}`}\r\n              >\r\n                {assignment_item.title}\r\n         </Link>\r\n         <br/>\r\n         <i className=\"fa fa-calendar-plus-o\"></i> Due Date :  <span Style=\"color:red\">{assignment_item.dueDate}</span>|  Possible points :{assignment_item.points} \r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n            </div>\r\n               ));\r\n        \r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal,\r\n  ListGroup,\r\n} from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ManageClasses from \"./ManageClasses\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set, } from \"firebase/database\";\r\nimport ColorPicker from \"../Tools/ColorPicker\";\r\n\r\nexport default class ClassNew extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      studentList: [],\r\n      studentListUI: [],\r\n      studentsID: [],\r\n      classList: [],\r\n      showHide: false,\r\n      openedDialog: -1,\r\n      nbclasses:0,\r\n      classID: \"\",\r\n      description: \"\",\r\n      meetingDates: \"\",\r\n      title: \"\",\r\n      published: 0,\r\n      roomNumber: \"\",\r\n      seats: 0,\r\n      section: \"\",\r\n      session: 2,\r\n      classColor:\"\",\r\n      students: [],\r\n      teacherID: this.props.match.params.euid,\r\n    };\r\n  }\r\n\r\n  //handle the student list popup\r\n  handleModalShowHide() {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n  //if student is selected, add it to the studentsID array\r\n  handleCheckboxChange = (event) => {\r\n    let newArray = [...this.state.studentsID, event.target.id];\r\n\r\n    if (this.state.studentsID.includes(event.target.id)) {\r\n      newArray = newArray.filter((day) => day !== event.target.id);\r\n    }\r\n    this.setState({\r\n      studentsID: newArray,\r\n    });\r\n  };\r\n\r\n  //method to update the state variables with the user inputs\r\n  handleClassInput = (e) => {\r\n    const name = e.target.name;\r\n\r\n    const value = e.target.value;\r\n\r\n    this.setState({ [name]: value });\r\n    console.log(\"Name: \" + name + \"value:\" + value);\r\n  };\r\n  //method to add class to the database\r\n  handleAddClass= () => {\r\n    const db = getDatabase();\r\n    set(ref(db, \"classes/\"+this.state.classID), {\r\n      classID: this.state.classID,\r\n      description: this.state.description,\r\n      meetingDates: this.state.meetingDates,\r\n      name: this.state.title,\r\n      published: this.state.published,\r\n      roomNumber: this.state.roomNumber,\r\n      seats: this.state.seats,\r\n      section: this.state.section,\r\n      session: this.state.session,\r\n      students: this.state.studentsID,\r\n      teacherID: this.props.match.params.euid,\r\n      classColor:this.state.classColor\r\n    }).then(() => {\r\n          \r\n      window.location.reload(false);\r\n    }).catch((error) => {\r\n      console.log(\"Failed to save data new class!\" + error);\r\n    });\r\n  }\r\n  handleColorCode =(colorValue)  =>{\r\n    this.setState({classColor: colorValue});\r\n}\r\n  //get List of students\r\n\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let studentList = [];\r\n\r\n    //get list of students\r\n    get(child(dbRef, `users`))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              studentList.push(itemVal);\r\n            });\r\n            this.setState({ studentList: studentList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n      \r\n  }\r\n  \r\n  render() {\r\n    //create UI to list list of students\r\n    const studentListUI = this.state.studentList.map((student_item) => (\r\n      <ListGroup.Item as=\"li\">\r\n        <Form.Check\r\n          inline\r\n          type=\"checkbox\"\r\n          onChange={this.handleCheckboxChange}\r\n          id={student_item.euid}\r\n          checked={this.state.studentsID.includes(student_item.euid)}\r\n        />\r\n        {student_item.firstname} -- {student_item.euid}\r\n      </ListGroup.Item>\r\n    ));\r\n    //\r\n    return (\r\n      <div>\r\n        <Sidenav role=\"teacher\"  euid={this.props.match.params.euid}/>\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col>\r\n              {\" \"}\r\n              <div className=\"big-title\">\r\n                <h3 className=\"big_title\">Classes</h3>\r\n\r\n                <div>\r\n               \r\n                  <ManageClasses teacherID={this.state.teacherID}></ManageClasses>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              {\" \"}\r\n              <div className=\"big-title\">\r\n                <h3 className=\"big_title\">New Classes</h3>\r\n              \r\n                <Form    onSubmit={this.handleAddClass}>\r\n                <Form.Group id=\"classID\">\r\n                    <Form.Label>Class Code</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"classID\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                       as=\"textarea\"\r\n                    \r\n                       style={{ height: '70px' }}\r\n                      name=\"description\"\r\n                      maxLength= \"124\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"section\">\r\n                    <Form.Label>Section</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"section\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"session\">\r\n                    <Form.Label>Session</Form.Label>\r\n                    <Form.Control\r\n                      type=\"number\"\r\n                      name=\"session\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"roomNumber\">\r\n                    <Form.Label>Room Number</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"roomNumber\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"seats\">\r\n                    <Form.Label>Seats</Form.Label>\r\n                    <Form.Control\r\n                      type=\"number\"\r\n                      name=\"seats\"\r\n                      required\r\n                      onChange={this.handleClassInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"meetingDates\">\r\n                    <Form.Label>Meeting Day</Form.Label>\r\n                 \r\n                    <Form.Select   name=\"meetingDay\" defaultValue=\"\"  required\r\n                      onChange={this.handleClassInput}>\r\n        <option>Choose...</option>\r\n        <option value=\"MWF\">MWF</option>\r\n        <option value=\"TTH\">TTH</option>\r\n      </Form.Select>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"class-color\">\r\n                    <Form.Label>Pick a color</Form.Label>\r\n                \r\n                   <ColorPicker onSelectcolor={this.handleColorCode}></ColorPicker>\r\n              \r\n                   <Button\r\n                      variant=\"outline-secondary\" className=\"add-student-btn\"\r\n                      onClick={() => this.handleModalShowHide()}\r\n                    >\r\n                      Add Students\r\n                    </Button>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"action\">\r\n                   \r\n                    <Button\r\n                      className=\"w-100 btn-secondary\"\r\n                      size=\"lm\"\r\n                      type=\"submit\"\r\n                   \r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Form>\r\n              </div>\r\n            </Col>\r\n            <Modal show={this.state.showHide}>\r\n              <Modal.Header\r\n                closeButton\r\n                onClick={() => this.handleModalShowHide()}\r\n              >\r\n                <Modal.Title>Students</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{studentListUI}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={() => this.handleModalShowHide()}\r\n                >\r\n                  Close\r\n                </Button>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={() => this.handleModalShowHide()}\r\n                >\r\n                  Save Changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { React, useState, Component }  from \"react\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport Footer from \"../Footer\";\r\nimport ClassNav from \"../Classes/ClassNav\";\r\nimport { Container, Row, Col , Table, Card} from \"react-bootstrap\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\n//import { Link, useHistory } from \"react-router-dom\";\r\nimport \"../../css/style.css\";\r\n\r\n\r\nexport default class Grades extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { classTitle: \"\" ,classSection :\"\" };\r\n      }\r\n      componentDidMount() {\r\n        const dbRef = ref(getDatabase());\r\n    \r\n        //get  class title\r\n        get(child(dbRef, \"classes/\" + this.props.match.params.classId))\r\n          .then(\r\n            (snapshot) => {\r\n              if (snapshot.exists()) {\r\n              \r\n                if (\r\n                  this.props.match.params.classId == snapshot.child(\"classID\").val()\r\n                ) {\r\n                  this.setState({ classTitle: snapshot.child(\"name\").val() });\r\n                  this.setState({ classSection: snapshot.child(\"section\").val() });\r\n                }\r\n              } else {\r\n                console.log(\"No data available\");\r\n              }\r\n            },\r\n            {\r\n              onlyOnce: true,\r\n            }\r\n          )\r\n          .catch((error) => {\r\n            console.error(error);\r\n          });\r\n      }\r\n\r\n    render() {\r\n    return(\r\n        <>\r\n        <Sidenav euid={this.props.match.params.euid} isActive=\"2\"/>\r\n\r\n        <Container>\r\n\r\n          <Row className=\"theme_body\">\r\n\r\n            <Col xs lg=\"2\">\r\n            <ClassNav   euid={this.props.match.params.euid} classId={this.props.match.params.classId} isActive=\"2\"></ClassNav>\r\n            </Col>\r\n\r\n            <Col>\r\n            <h3 className=\"big_title\">{this.state.classTitle} Section {this.state.classSection}</h3>\r\n            <Row>\r\n            <Col lg= {6} md ={12}>\r\n                <Table striped hover size =\"sm\" className=\"gradesTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Assignment Name</th>\r\n                            <th>Due Date</th>\r\n                            <th>Score</th>\r\n                            <th>Out of</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>One</td>\r\n                            <td>12/12/1212</td>\r\n                            <td>1</td>\r\n                            <td>1</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Two</td>\r\n                            <td>temp</td>\r\n                            <td>1</td>\r\n                            <td>1</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Three</td>\r\n                            <td>temp</td>\r\n                            <td>1</td>\r\n                            <td>1</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n            <Col lg={{ span: 4 , offset: 1 }} md={12}>\r\n                <Card>\r\n                <h4>Grade Distribution</h4>\r\n                \r\n                </Card>\r\n            </Col>\r\n            </Row>\r\n            \r\n            </Col>\r\n\r\n          </Row>\r\n\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n\r\n        </Container>\r\n        \r\n        </>\r\n    );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set, remove } from \"firebase/database\";\r\n\r\n\r\nexport default class ManageAssignment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      assignmentList : [],\r\n      showHide: false,\r\n      openedDialog: -1,\r\n      actionType: \"\",\r\n      assignmentID: \"\",\r\n      classID: \"\",\r\n      className: \"\",\r\n      description: \"\",\r\n      dueDate: \"\",\r\n      points: \"\",\r\n      published: 0,\r\n      summary: \"\",\r\n      title: \"\",\r\n      classList: [],\r\n      teacherID: this.props.teacherID,\r\n    };\r\n  }\r\n\r\n  openModal = (assignmentid, actionType) => {\r\n    this.setState({\r\n      openedDialog: assignmentid,\r\n      actionType: actionType,\r\n    });\r\n  };\r\n\r\n  closeModal = () => {\r\n    this.setState({\r\n      openedDialog: null,\r\n    });\r\n  };\r\n  handleColorCode = (colorValue) => {\r\n    this.setState({ classColor: colorValue });\r\n  };\r\n    //method to update the state variables with the user inputs\r\n    handleAssignmentInput = (e) => {\r\n      const name = e.target.name;\r\n  \r\n      const value = e.target.value;\r\n  \r\n      this.setState({ [name]: value });\r\n      console.log(\"Name: \" + name + \"value:\" + value);\r\n    };\r\n  //handle popup\r\n  handleModalShowHide() {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n\r\n   //method to remove class to the database\r\n   handleRemoveClass = (assignmentID) => {\r\n    const db = getDatabase();\r\n    ///\r\n\r\n    if (window.confirm(\"Are you sure you wish to delete this item?\")) {\r\n      remove(ref(db, \"assignments/\" + assignmentID))\r\n        .then(() => {\r\n          window.location.reload(false);\r\n          document.getElementById(\"feedback\").style.display = \"block\";\r\n          document.getElementById(\"feedback\").innerText =\r\n            \"Assignment \" + assignmentID + \" remove successfully!\";\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Failed to remove class :\" + assignmentID + \" error :\" + error\r\n          );\r\n        });\r\n    }\r\n\r\n    ///\r\n  };\r\n  //method to update assignment to the database\r\n  handleUpdateAssignment = (assignmentid) => {\r\n   //alert(document.getElementById('duedate_Val').value);\r\n    const db = getDatabase();\r\n    set(ref(db, \"assignments/\" + assignmentid), {\r\n      assignmentID:assignmentid,\r\n      description: document.getElementById('description_Val').value,\r\n      dueDate:document.getElementById('duedate_Val').value,\r\n      title:document.getElementById('title_Val').value,\r\n      published:1,\r\n      points: document.getElementById('points_Val').value,\r\n      summary: document.getElementById('summary_Val').value,\r\n      classID: document.getElementById('classID_Val').value,\r\n      teacher: this.props.teacherID\r\n    })\r\n      .then(() => {\r\n       // window.location.reload(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Failed to save data new class!\" + error);\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let classList = [];\r\n    let assignmentList = [];\r\n    let teacher = this.props.teacherID;\r\n   \r\n    //get list of classes\r\n    get(child(dbRef, `classes`))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n          \r\n              var itemVal = item.val();\r\n              console.log(\"Teacher ID\" + itemVal.teacherID + \"---\" + teacher);\r\n              if (itemVal.teacherID == teacher) {\r\n                console.log(\"Teacher ID\" + itemVal.teacherID);\r\n                classList.push(itemVal);\r\n              }\r\n            });\r\n            // this.setState({nb_classes: nb_classes});\r\n            this.setState({ classList: classList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n\r\n     //get list of assignments\r\n     get(child(dbRef, `assignments`))\r\n     .then(\r\n       (snapshot) => {\r\n         if (snapshot.exists()) {\r\n           snapshot.forEach(function (item) {\r\n         \r\n             var itemVal = item.val();\r\n            \r\n             if (itemVal.teacher == teacher) {\r\n            \r\n               assignmentList.push(itemVal);\r\n             }\r\n           });\r\n           // this.setState({nb_classes: nb_classes});\r\n           this.setState({ assignmentList: assignmentList });\r\n         } else {\r\n           console.log(\"No data available\");\r\n         }\r\n       },\r\n       {\r\n         onlyOnce: true,\r\n       }\r\n     )\r\n     .catch((error) => {\r\n       console.error(error);\r\n     });\r\n\r\n  \r\n  }\r\n\r\n  render() {\r\n  \r\n    return (\r\n      <div>\r\n      \r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Class</th>\r\n              <th>Assignment</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.assignmentList.map((assignment_item) => (\r\n              <tr>\r\n                 \r\n                <td>{assignment_item.assignmentID}</td>\r\n                <td>{assignment_item.classID}</td>\r\n                <td>{assignment_item.title}</td>\r\n                <td width=\"37%\">\r\n                  {\" \"}\r\n                  <Button\r\n                    variant=\"secondary class-more-btn\"\r\n                    onClick={() =>\r\n                      this.openModal(assignment_item.assignmentID, \"details\")\r\n                    }\r\n                  >\r\n                    <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>{\" \"}\r\n                    Details\r\n                  </Button>{\" \"}\r\n                  <DropdownButton title=\"Manage\" >\r\n                    <Dropdown.Item\r\n                      eventKey=\"1\"\r\n                      onClick={() =>\r\n                        this.openModal(assignment_item.assignmentID, \"update\")\r\n                      }\r\n                    >\r\n                      <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>{\" \"}\r\n                      Update\r\n                    </Dropdown.Item>\r\n                   \r\n                    <Dropdown.Item eventKey=\"2\"    onClick={() => this.handleRemoveClass(assignment_item.assignmentID)}>\r\n                      <i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete\r\n                    </Dropdown.Item>\r\n                  </DropdownButton>\r\n                </td>\r\n                <Modal\r\n                  show={this.state.openedDialog === assignment_item.assignmentID}\r\n                  onHide={this.closeModal}\r\n                >\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>{assignment_item.title}</Modal.Title>\r\n                  </Modal.Header>\r\n\r\n                  <Modal.Body>\r\n                  <Form  onSubmit={() => this.handleUpdateAssignment(assignment_item.assignmentID)}>\r\n                <Form.Group id=\"classID\">\r\n                  \r\n                  <Form.Label>Class Name</Form.Label>\r\n                  <Form.Control\r\n                      type=\"text\"\r\n                      name=\"classID\"\r\n                      id= \"classID_Val\"\r\n                      defaultValue= {assignment_item.classID}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                      readOnly=\"true\"\r\n                    ></Form.Control>                  \r\n                    </Form.Group>\r\n           \r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      id= \"title_Val\"\r\n                      defaultValue= {assignment_item.title}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      id= \"description_Val\"\r\n                      defaultValue= {assignment_item.description}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"summary\">\r\n                    <Form.Label>Summary</Form.Label>\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      name=\"summary\"\r\n                      id= \"summary_Val\"\r\n                      style={{ height: '100px' }}\r\n                      defaultValue= {assignment_item.summary}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"duedate\">\r\n                    <Form.Label>Due Date</Form.Label>\r\n                    <Form.Control\r\n                      type=\"date\"\r\n                      name=\"duedate\"\r\n                      id= \"duedate_Val\"\r\n                      defaultValue= {assignment_item.dueDate}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"points\">\r\n                    <Form.Label>Points</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"points\"\r\n                      id= \"points_Val\"\r\n                      defaultValue= {assignment_item.points}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n<Form.Group id=\"published\">\r\n\r\n<Form.Check\r\n        type=\"checkbox\"\r\n        id= \"published\"\r\n        className=\"mb-2\"\r\n        label=\"Published\"\r\n      />\r\n  </Form.Group>\r\n  <Form.Group>\r\n  <Button    disabled={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                      variant=\"primary\"\r\n                     type = \"submit\"\r\n                    >\r\n                      Save Changes\r\n                    </Button>\r\n  </Form.Group>\r\n                \r\n                </Form>\r\n                  </Modal.Body>\r\n                \r\n                </Modal>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ClassNav from \"../Classes/ClassNav\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\n\r\nimport ListAssignmentByClass from \"./ListAssignmentByClass\";\r\nexport default class AssignmentList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { classTitle: \"\" ,classSection :\"\" };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n\r\n    //get  classe title\r\n\r\n    get(child(dbRef, \"classes/\" + this.props.match.params.classId))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n          \r\n            if (\r\n              this.props.match.params.classId == snapshot.child(\"classID\").val()\r\n            ) {\r\n              this.setState({ classTitle: snapshot.child(\"name\").val() });\r\n              this.setState({ classSection: snapshot.child(\"section\").val() });\r\n            }\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n    \r\n       <Sidenav euid={this.props.match.params.euid}/>\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col xs lg=\"2\">\r\n          \r\n              <ClassNav classId={this.props.match.params.classId} euid={this.props.match.params.euid} isActive=\"3\"></ClassNav>\r\n            </Col>\r\n            <Col> <h3 className=\"big_title\">Assignments for {this.state.classTitle} Section {this.state.classSection}</h3>\r\n           \r\n            <ListAssignmentByClass classID={this.props.match.params.classId} euid={this.props.match.params.euid}></ListAssignmentByClass>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ClassNav from \"../Classes/ClassNav\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\n\r\nexport default class PeopleByClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { classTitle: \"\" ,classSection :\"\" };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n\r\n    //get  classe title\r\n\r\n    get(child(dbRef, \"classes/\" + this.props.match.params.classId))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n          \r\n            if (\r\n              this.props.match.params.classId == snapshot.child(\"classID\").val()\r\n            ) {\r\n              this.setState({ classTitle: snapshot.child(\"name\").val() });\r\n              this.setState({ classSection: snapshot.child(\"section\").val() });\r\n            }\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n    \r\n       <Sidenav euid={this.props.match.params.euid}/>\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col xs lg=\"2\">\r\n          \r\n              <ClassNav classId={this.props.match.params.classId} euid={this.props.match.params.euid} isActive=\"5\"></ClassNav>\r\n            </Col>\r\n            <Col> <h3 className=\"big_title\">People for {this.state.classTitle} Section {this.state.classSection}</h3>\r\n           \r\n         TODO\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ClassNav from \"../Classes/ClassNav\";\r\nimport { getDatabase, ref, get, child } from \"firebase/database\";\r\n\r\nexport default class AttendanceByClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { classTitle: \"\" ,classSection :\"\" };\r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n\r\n    //get  classe title\r\n\r\n    get(child(dbRef, \"classes/\" + this.props.match.params.classId))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n          \r\n            if (\r\n              this.props.match.params.classId == snapshot.child(\"classID\").val()\r\n            ) {\r\n              this.setState({ classTitle: snapshot.child(\"name\").val() });\r\n              this.setState({ classSection: snapshot.child(\"section\").val() });\r\n            }\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n    \r\n       <Sidenav euid={this.props.match.params.euid}/>\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col xs lg=\"2\">\r\n          \r\n              <ClassNav classId={this.props.match.params.classId} euid={this.props.match.params.euid} isActive=\"4\"></ClassNav>\r\n            </Col>\r\n            <Col> <h3 className=\"big_title\">Attendances for {this.state.classTitle} Section {this.state.classSection}</h3>\r\n           \r\n         TODO\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set } from \"firebase/database\";\r\n\r\n\r\nexport default class ManageModules extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      moduleList : [],\r\n      showHide: false,\r\n      openedDialog: -1,\r\n      actionType: \"\",\r\n      moduleID: \"\",\r\n      classID: \"\",\r\n      description: \"\",\r\n      published: 0,\r\n      title: \"\",\r\n      ressourcesList: [],\r\n      teacherID: this.props.teacherID,\r\n      sel_moduleID : \"\"\r\n    };\r\n  }\r\n\r\n  openModal = (moduleid, actionType) => {\r\n    this.setState({\r\n      openedDialog: moduleid,\r\n      actionType: actionType\r\n    });\r\n  };\r\n\r\n  closeModal = () => {\r\n    this.setState({\r\n      openedDialog: null,\r\n    });\r\n  };\r\n  handleColorCode = (colorValue) => {\r\n    this.setState({ classColor: colorValue });\r\n  };\r\n    //method to update the state variables with the user inputs\r\n    handleModuleInput = (e) => {\r\n      const name = e.target.name;\r\n  \r\n      const value = e.target.value;\r\n  \r\n      this.setState({ [name]: value });\r\n      console.log(\"Name: \" + name + \"value:\" + value);\r\n    };\r\n  //handle popup\r\n  handleModalShowHide() {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n  //method to update module to the database\r\n  handleUpdateModule = (moduleid) => {\r\n    const db = getDatabase();\r\n    set(ref(db, \"modules/\" + moduleid), {\r\n      moduleID:moduleid,\r\n      description: document.getElementById('description_Val'+moduleid).value,\r\n    \r\n      title:document.getElementById('title_Val'+moduleid).value,\r\n      published:1,\r\n      classID:this.props.classID\r\n    })\r\n      .then(() => {\r\n        window.location.reload(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Failed to save data new class!\" + error);\r\n      });\r\n  };\r\n  //method to get list of ressources by module\r\n  getRessources= (moduleid) => {\r\n    let ressourcesList = [];\r\n    const db = getDatabase();\r\n       //get list of ressources\r\n       get(ref(db, \"ressources/\" + moduleid))\r\n       .then(\r\n         (snapshot) => {\r\n           if (snapshot.exists()) {\r\n             snapshot.forEach(function (item) {\r\n               var itemVal = item.val();\r\n                ressourcesList.push(itemVal);\r\n             });\r\n           \r\n             this.setState({ ressourcesList: ressourcesList });\r\n           } else {\r\n             console.log(\"No data available\");\r\n           }\r\n         },\r\n         {\r\n           onlyOnce: true,\r\n         }\r\n       )\r\n       .catch((error) => {\r\n         console.error(error);\r\n       });\r\n \r\n  }\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let moduleList = [];\r\n    let classID = this.props.classID;\r\n   \r\n \r\n     //get list of modules\r\n     get(child(dbRef, `modules`))\r\n     .then(\r\n       (snapshot) => {\r\n         if (snapshot.exists()) {\r\n           snapshot.forEach(function (item) {\r\n         \r\n             var itemVal = item.val();\r\n            \r\n             if (itemVal.classID == classID) {\r\n            \r\n               moduleList.push(itemVal);\r\n             }\r\n           });\r\n           // this.setState({nb_classes: nb_classes});\r\n           this.setState({ moduleList: moduleList });\r\n         } else {\r\n           console.log(\"No data available\");\r\n         }\r\n       },\r\n       {\r\n         onlyOnce: true,\r\n       }\r\n     )\r\n     .catch((error) => {\r\n       console.error(error);\r\n     });\r\n\r\n  \r\n  }\r\n\r\n  render() {\r\n  \r\n    return (\r\n      <div>\r\n      \r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Class</th>\r\n              <th>Module</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.moduleList.map((module_item) => (\r\n              <tr>\r\n                 \r\n                <td>{module_item.moduleID}</td>\r\n                <td>{module_item.classID}</td>\r\n                <td>{module_item.title}</td>\r\n                <td width=\"37%\">\r\n                  {\" \"}\r\n                  <Button\r\n                    variant=\"secondary class-more-btn\"\r\n                    onClick={() =>\r\n                      this.openModal(module_item.moduleID, \"details\")\r\n                    }\r\n                  >\r\n                    <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>{\" \"}\r\n                    Details\r\n                  </Button>{\" \"}\r\n                  <DropdownButton title=\"Manage\" >\r\n                    <Dropdown.Item\r\n                      eventKey=\"1\"\r\n                      onClick={() =>\r\n                        this.openModal(module_item.moduleID, \"update\")\r\n                      }\r\n                    >\r\n                      <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>{\" \"}\r\n                      Update\r\n                    </Dropdown.Item>\r\n                   \r\n                    <Dropdown.Item eventKey=\"2\">\r\n                      <i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item\r\n                      eventKey=\"3\"\r\n                      \r\n                    >\r\n                      <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>{\" \"}\r\n                      Add new ressource\r\n                    </Dropdown.Item>\r\n                   \r\n                  </DropdownButton>\r\n                </td>\r\n                <Modal\r\n                  show={this.state.openedDialog === module_item.moduleID}\r\n                  onHide={this.closeModal}\r\n                >\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>{module_item.title}</Modal.Title>\r\n                  </Modal.Header>\r\n\r\n                  <Modal.Body>\r\n                  <Form  onSubmit={() => this.handleUpdateModule(module_item.moduleID)}>\r\n                <Form.Group id=\"moduleID\">\r\n                  \r\n                  <Form.Label>Module Code</Form.Label>\r\n                  <Form.Control\r\n                      type=\"text\"\r\n                      name=\"moduleID\"\r\n                      id= \"moduleID_Val\"{...module_item.moduleID}\r\n                      value= {module_item.moduleID}\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                      readOnly=\"true\"\r\n                    ></Form.Control>                  \r\n                    </Form.Group>\r\n           \r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      id= \"title_Val\"{...module_item.moduleID}\r\n                      value= {module_item.title}\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      id= \"description_Val\"{...module_item.moduleID}\r\n                      value= {module_item.description}\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                      readOnly={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n               \r\n<Form.Group id=\"published\">\r\n\r\n<Form.Check\r\n        type=\"checkbox\"\r\n        id= \"published\"{...module_item.moduleID}\r\n        className=\"mb-2\"\r\n        label=\"Published\"\r\n      />\r\n  </Form.Group>\r\n                \r\n                </Form>\r\n                  </Modal.Body>\r\n                  <Modal.Footer>\r\n                    <Button    disabled={\r\n                        this.state.actionType === \"update\" ? false : true\r\n                      }\r\n                      variant=\"primary\"\r\n                     type = \"submit\"\r\n                    >\r\n                      Save Changes\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n\r\n\r\n        <Modal\r\n                  show={this.state.openedDialog === this.state.sel_moduleID}\r\n                  onHide={this.closeModal}\r\n                >\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>New Ressources</Modal.Title>\r\n                  </Modal.Header>\r\n\r\n                  <Modal.Body>\r\n                  <Form  onSubmit={() => this.handleAddRessource(this.state.moduleID)}>\r\n                <Form.Group id=\"ressourceID\">\r\n                  \r\n                  <Form.Label>Ressource Code</Form.Label>\r\n                  <Form.Control\r\n                      type=\"text\"\r\n                      name=\"ressourceID\"\r\n                      id= \"ressourceID_Val\"{...this.state.moduleID}\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                   \r\n                    ></Form.Control>                  \r\n                    </Form.Group>\r\n           \r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      id= \"title_Val_res\"{...this.state.moduleID}\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      id= \"description_Val_res\"{...this.state.moduleID}\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                   \r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n               \r\n<Form.Group id=\"published\">\r\n\r\n<Form.Check\r\n        type=\"checkbox\"\r\n        id= \"published_res\"{...this.state.moduleID}\r\n        className=\"mb-2\"\r\n        label=\"Published\"\r\n      />\r\n  </Form.Group>\r\n                \r\n                </Form>\r\n                  </Modal.Body>\r\n                  <Modal.Footer>\r\n                    <Button   \r\n                      variant=\"primary\"\r\n                     type = \"submit\"\r\n                    >\r\n                      Save Changes\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal,\r\n  ListGroup,\r\n} from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ManageAssignments from \"./ManageAssignment\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set } from \"firebase/database\";\r\n\r\nexport default class AssignmentNew extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showHide: false,\r\n      openedDialog: -1,\r\n      assignmentID: \"\",\r\n      classID: \"\",\r\n      className: \"\",\r\n      description: \"\",\r\n      duedate: \"\",\r\n      points: \"\",\r\n      published: 0,\r\n      summary: \"\",\r\n      title: \"\",\r\n      classList: [],\r\n      teacherID: this.props.match.params.euid,\r\n    };\r\n  }\r\n\r\n  //handle the student list popup\r\n  handleModalShowHide() {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n  \r\n  //method to update the state variables with the user inputs\r\n  handleAssignmentInput = (e) => {\r\n    const name = e.target.name;\r\n\r\n    const value = e.target.value;\r\n\r\n    this.setState({ [name]: value });\r\n   // console.log(\"Name: \" + name + \"value:\" + value);\r\n  };\r\n  //method to add Assignment to the database\r\n  handleAddAssignment = (event) => {\r\n    const db = getDatabase();\r\n    set(ref(db, \"assignments/\" + this.state.assignmentID), {\r\n      assignmentID: this.state.assignmentID,\r\n      description: this.state.description,\r\n      title: this.state.title,\r\n      classID: this.state.classID,\r\n      dueDate: this.state.duedate,\r\n      published: this.state.published,\r\n      points: this.state.points,\r\n      summary: this.state.summary,\r\n      teacher: this.props.match.params.euid,\r\n    })\r\n      .then(() => {\r\n        window.location.reload(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Failed to save data new Assignment!\" + error);\r\n      });\r\n      event.preventDefault();\r\n  };\r\n\r\n  //get List of classes\r\n\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let classList = [];\r\n\r\n    //get list of classes\r\n    get(child(dbRef, `classes`))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              classList.push(itemVal);\r\n            });\r\n            this.setState({ classList: classList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n          //create nav nodes for classes\r\n          const listclasses = this.state.classList.map((class_item) =>\r\n        \r\n          <option value={class_item.classID}>\r\n            {class_item.classID} -- {class_item.name} </option>\r\n      );\r\n    return (\r\n      <div>\r\n        <Sidenav role=\"teacher\" euid={this.props.match.params.euid} />\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col>\r\n              {\" \"}\r\n              <div className=\"big-title\">\r\n                <h3 className=\"big_title\">Assignments</h3>\r\n\r\n                <div>\r\n                  <ManageAssignments\r\n                    teacherID={this.state.teacherID}\r\n                  ></ManageAssignments>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              {\" \"}\r\n              <div className=\"big-title\">\r\n                <h3 className=\"big_title\">New Assignments</h3>\r\n         \r\n                <Form  onSubmit={this.handleAddAssignment}>\r\n                <Form.Group id=\"classID\">\r\n                  \r\n                  <Form.Label>Class Name</Form.Label>\r\n                <Form.Select  name= \"classID\" aria-label=\"dropdown list of classes\"   onChange={this.handleAssignmentInput} required>\r\n                <option value=\"\">\r\n         Select Class</option>\r\n                  {listclasses}\r\n                  </Form.Select>\r\n                  </Form.Group>\r\n                <Form.Group id=\"assignmentID\">\r\n                  \r\n                    <Form.Label>Assignment Code</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"assignmentID\"\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"summary\">\r\n                    <Form.Label>Summary</Form.Label>\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      name=\"summary\"\r\n                      style={{ height: '100px' }}\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"duedate\">\r\n                    <Form.Label>Due Date</Form.Label>\r\n                    <Form.Control\r\n                      type=\"date\"\r\n                      name=\"duedate\"\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"points\">\r\n                    <Form.Label>Points</Form.Label>\r\n                    <Form.Control\r\n                      type=\"number\"\r\n                      name=\"points\"\r\n                      required\r\n                      onChange={this.handleAssignmentInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n<Form.Group id=\"published\">\r\n\r\n<Form.Check\r\n        type=\"checkbox\"\r\n        id=\"published\"\r\n        className=\"mb-2\"\r\n        label=\"Published\"\r\n      />\r\n  </Form.Group>\r\n                  <Form.Group id=\"action\">\r\n                    <Button\r\n                      className=\"w-100 btn-secondary\"\r\n                      size=\"lm\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Form>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal,\r\n  ListGroup,\r\n} from \"react-bootstrap\";\r\nimport Footer from \"../Footer\";\r\nimport Sidenav from \"../Sidenav\";\r\nimport ManageModules from \"./ManageModules\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set } from \"firebase/database\";\r\n\r\nexport default class ModuleNew extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showHide: false,\r\n      openedDialog: -1,\r\n      moduleID: \"\",\r\n      classID: \"\",\r\n      description: \"\",\r\n      published: 0,\r\n      title: \"\",\r\n      teacherID: this.props.match.params.teacherID,\r\n    };\r\n  }\r\n\r\n  //handle the student list popup\r\n  handleModalShowHide() {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n\r\n  //method to update the state variables with the user inputs\r\n  handleModuleInput = (e) => {\r\n    const name = e.target.name;\r\n\r\n    const value = e.target.value;\r\n\r\n    this.setState({ [name]: value });\r\n    // console.log(\"Name: \" + name + \"value:\" + value);\r\n  };\r\n  //method to add Module to the database\r\n  handleAddModule = (event) => {\r\n    const db = getDatabase();\r\n    set(ref(db, \"modules/\" + this.state.moduleID), {\r\n      moduleID: this.state.moduleID,\r\n      description: this.state.description,\r\n      title: this.state.title,\r\n      published: this.state.published,\r\n      classID: this.props.match.params.classID,\r\n    })\r\n      .then(() => {\r\n        window.location.reload(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Failed to save data new Module!\" + error);\r\n      });\r\n    event.preventDefault();\r\n  };\r\n\r\n  //get List of classes\r\n\r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let classList = [];\r\n\r\n    //get list of classes\r\n    get(child(dbRef, `classes`))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              classList.push(itemVal);\r\n            });\r\n            this.setState({ classList: classList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <Sidenav role=\"teacher\" euid={this.props.match.params.teacherID} />\r\n        <Container>\r\n          <Row className=\"theme_body\">\r\n            <Col>\r\n              {\" \"}\r\n              <div className=\"big-title\">\r\n                <h3 className=\"big_title\">Modules</h3>\r\n\r\n                <div>\r\n                  <ManageModules\r\n                    teacherID={this.props.match.params.teacherID}\r\n                    classID={this.props.match.params.classID}\r\n                  ></ManageModules>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              {\" \"}\r\n              <div className=\"big-title\">\r\n                <h3 className=\"big_title\">New Modules</h3>\r\n                {this.state.description}\r\n                <Form onSubmit={this.handleAddModule}>\r\n                  <Form.Group id=\"moduleID\">\r\n                    <Form.Label>Module Code</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"moduleID\"\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      required\r\n                      onChange={this.handleModuleInput}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group id=\"published\">\r\n                    <Form.Check\r\n                      type=\"checkbox\"\r\n                      id=\"published\"\r\n                      className=\"mb-2\"\r\n                      label=\"Published\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group id=\"action\">\r\n                    <Button\r\n                      className=\"w-100 btn-secondary\"\r\n                      size=\"lm\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Form>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Footer></Footer>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Button,\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\nimport \"../../firebase\";\r\nimport { getDatabase, ref, get, child, set } from \"firebase/database\";\r\nimport Sidenav from \"../Sidenav\";\r\n\r\nexport default class RollCall extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      actionType: \"\",\r\n      studentList: [],\r\n      classID: \"\",\r\n      teacherID: this.props.match.params.teacherID,\r\n      hidefeedback: \"none\",\r\n      classList:[],\r\n      firstName :\"\"\r\n    };\r\n  }\r\n //method to update the state variables with the user selection\r\n getListofstudents = (e) => {\r\n  const name = e.target.name;\r\n\r\n  const value = e.target.value;\r\n\r\n  this.setState({ [name]: value });\r\n\r\n\r\n  //get list of student of the selected class\r\n  const dbRef = ref(getDatabase());\r\n  let studentList = [];\r\n  get(child(dbRef, \"classes/\"+this.state.classID+\"/students\"))\r\n  .then(\r\n    (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        snapshot.forEach(function (item) {\r\n          var itemVal = item.val();\r\n          studentList.push(itemVal);\r\n        });\r\n        this.setState({ studentList: studentList });\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n    },\r\n    {\r\n      onlyOnce: true,\r\n    }\r\n  )\r\n  .catch((error) => {\r\n    console.error(error);\r\n  });\r\n // console.log(\"Name: \" + name + \"value:\" + value);\r\n};\r\n\r\ngetstudentFirstName = (euid,i) => {\r\n\r\n  const dbRef = ref(getDatabase());\r\n  let firstName = \"\";\r\n\r\n  get(child(dbRef, \"users/\"+euid))\r\n  .then(\r\n    (snapshot) => {\r\n      if (snapshot.exists()) {\r\n     \r\n        firstName = snapshot.child(\"firstname\").val();\r\ndocument.getElementsByName(\"firstnames\")[i].innerHTML = firstName;\r\n      console.log(firstName);\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n    },\r\n    {\r\n      onlyOnce: false,\r\n    \r\n\r\n    },\r\n   \r\n  )\r\n  .catch((error) => {\r\n    console.error(error);\r\n  });\r\n\r\nreturn firstName;\r\n};\r\n  //method to roll call \r\n  handleRollCall = (studentID,status) => {\r\n    const db = getDatabase();\r\n    const date = new Date();\r\n    let today = date.getMonth() +\"-\" +date.getFullYear() + \"-\" +date.getDate()  ;\r\n    set(ref(db, \"attendances/\" + this.state.classID+ \"/\"+studentID + \"/\" + today), {\r\n    \r\n     \"status\": status,\r\n     \"teacherID\":this.state.teacherID,\r\n    \r\n    })\r\n      .then(() => {\r\n        window.location.reload(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Failed to save data new class!\" + error);\r\n      });\r\n  };\r\n \r\n  componentDidMount() {\r\n    const dbRef = ref(getDatabase());\r\n    let classList = [];\r\n    let teacher = this.state.teacherID;\r\n\r\n    //get list of classes\r\n    get(child(dbRef, `classes`))\r\n      .then(\r\n        (snapshot) => {\r\n          if (snapshot.exists()) {\r\n            snapshot.forEach(function (item) {\r\n              var itemVal = item.val();\r\n              console.log(\"Teacher ID\" + itemVal.teacherID + \"---\" + teacher);\r\n              if (itemVal.teacherID == teacher) {\r\n                console.log(\"Teacher ID\" + itemVal.teacherID);\r\n                classList.push(itemVal);\r\n              }\r\n            });\r\n            // this.setState({nb_classes: nb_classes});\r\n            this.setState({ classList: classList });\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        },\r\n        {\r\n          onlyOnce: true,\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    \r\n  }\r\n\r\n  render() {\r\n    //create nav nodes for classes\r\n    const listclasses = this.state.classList.map((class_item) =>\r\n        \r\n    <option value={class_item.classID}>\r\n      {class_item.classID} -- {class_item.name} </option>\r\n         );\r\n    return (\r\n      <div>\r\n     \r\n      <Sidenav role=\"teacher\"  euid={this.props.match.params.euid}/>\r\n      <Container>\r\n        <Row className=\"theme_body\">\r\n          <Col>\r\n            {\" \"}\r\n            <div className=\"big-title\">\r\n              <h3 className=\"big_title\">Classes</h3>\r\n             \r\n\r\n      <div>\r\n        \r\n\r\n<Form.Group id=\"classID\">\r\n                  \r\n                \r\n                <Form.Select  name= \"classID\" aria-label=\"dropdown list of classes\"   onChange={this.getListofstudents} required>\r\n                <option value=\"\">\r\n         Select Class</option>\r\n                  {listclasses}\r\n                  </Form.Select>\r\n                  </Form.Group>\r\n                  \r\n               \r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n          \r\n              <th>Student ID</th>\r\n              <th>First Name</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.studentList.map((student_item,index) => (\r\n              <tr>\r\n                <td>{student_item}</td>\r\n                <td>{ this.getstudentFirstName(student_item,index)} <label name=\"firstnames\"></label></td>\r\n                <td width=\"37%\">\r\n                  {\" \"}\r\n                  <Button\r\n                    variant=\"success class-more-btn\"\r\n                    onClick={() =>\r\n                      this.handleRollCall(student_item, \"Present\")\r\n                    }\r\n                  >\r\n                    <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>{\" \"}\r\n                    Present\r\n                  </Button>{\" \"}\r\n                  <Button\r\n                    variant=\"danger class-more-btn\"\r\n                    onClick={() =>\r\n                      this.handleRollCall(student_item, \"Absent\")\r\n                    }\r\n                  >\r\n                    <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>{\" \"}\r\n                    Absent\r\n                  </Button>{\" \"}\r\n                  \r\n                </td>\r\n                            </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      </div>\r\n      </Col>\r\n      </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport App from './components/App';\r\nimport './css/style.css'; \r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  \r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}